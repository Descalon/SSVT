module Euler where
    
    {-- 
        Problem 1 (https://projecteuler.net/problem=1)
        If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

        Find the sum of all the multiples of 3 or 5 below 1000.
    --}

    findMultiples :: Int -> Int
    findMultiples max = (sum . (filter (\x -> x `mod` 3 == 0 || x `mod` 5 == 0)) ) [1 .. (max - 1)]

    -- ran with ghci: [findMultiples 1000]. solution is 233168. 
    
    {--
        Problem 2 (https://projecteuler.net/problem=2)
        Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

        By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    --}

    -- In a Fibonacci sequence, every 3rd element is even. So let's write a helper function
    every n xs = case drop (n-1) xs of
        (y:ys) -> y : every n ys
        [] -> []

    everyThird = every 3

    fib =
        let fib' a b = a:fib' b (a+b)
        in fib' 1 1
    
    p2Sum = (sum . takeWhile (\x -> x < 4000000) . everyThird)

    -- Ran with ghci: [p2Sum fib]. Solution is 4613732

    {--
        Problem 3 (https://projecteuler.net/problem=3)
        The prime factors of 13195 are 5, 7, 13 and 29.

        What is the largest prime factor of the number 600851475143 ?
    --}

    -- Using primes function from Lab1
    prime :: Integer -> Bool
    prime n = n > 1 && all (\ x -> rem n x /= 0) xs
            where xs = takeWhile (\ y -> y^2 <= n) primes

    primes :: [Integer]
    primes = 2 : filter prime [3..] 

    factors :: Integer -> [Integer] -> [Integer] -> [Integer]
    factors 1 _ acc = acc
    factors input list acc = if divisible then factors input' t acc' else factors input t acc'
                            where
                                h = head list
                                t = tail list
                                divisible = (input `mod` h) == 0
                                input' = input `div` h
                                acc' = h : acc

    primeFactors :: Integer -> [Integer]
    primeFactors input = factors input primes []

    biggestFactorOf input = head $ primeFactors input

    problemInput = 600851475143

    -- Ran with ghci: [biggestFactorOf problemInput]. Solution is 6857
